"use strict";(self.webpackChunkbutlr_integrations=self.webpackChunkbutlr_integrations||[]).push([[355],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return t?a.createElement(g,s(s({ref:n},u),{},{components:t})):a.createElement(g,s({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:1},s="Current Occupancy - Presence Sensors",i={unversionedId:"tutorials/OccupancyPresence",id:"tutorials/OccupancyPresence",title:"Current Occupancy - Presence Sensors",description:"Introduction",source:"@site/docs/tutorials/OccupancyPresence.md",sourceDirName:"tutorials",slug:"/tutorials/OccupancyPresence",permalink:"/docs/tutorials/OccupancyPresence",draft:!1,editUrl:"https://github.com/butlrtechnologies/butlrtechnologies.github.io/tree/main/docs/tutorials/OccupancyPresence.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Creating a custom heatmap",permalink:"/docs/tutorials/Heatmap"},next:{title:"Current Occupancy - Traffic Sensors",permalink:"/docs/tutorials/OccupancyTraffic"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"1 - Get your access token",id:"1---get-your-access-token",level:2},{value:"1.1 - Using your Username and Password",id:"11---using-your-username-and-password",level:3},{value:"1.2 - Using your API Credentials",id:"12---using-your-api-credentials",level:3},{value:"2 - Query occupancy for rooms with presence sensors",id:"2---query-occupancy-for-rooms-with-presence-sensors",level:2},{value:"2.1 - Query <code>current</code> occupancy for all rooms",id:"21---query-current-occupancy-for-all-rooms",level:3},{value:"2.2 Let&#39;s break down the response:",id:"22-lets-break-down-the-response",level:3},{value:"3 - Calculate Room Occupancy based on a collection of presence sensors",id:"3---calculate-room-occupancy-based-on-a-collection-of-presence-sensors",level:2},{value:"Closing Remarks",id:"closing-remarks",level:2}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"current-occupancy---presence-sensors"},"Current Occupancy - Presence Sensors"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The way you calculate occupancy from presence sensors vs traffic sensors is different. Presence sensors measure the number of people under its field of view. For example, if you have a room with 10 people and 2 presence sensors, one sensor might capture 7 people and the other sensor will capture the remaining 3.  The occupancy is the Sum of presence sensors within a room."),(0,r.kt)("h2",{id:"1---get-your-access-token"},"1 - Get your access token"),(0,r.kt)("h3",{id:"11---using-your-username-and-password"},"1.1 - Using your Username and Password"),(0,r.kt)("p",null,"Get an access token using your username and password.  You can use the following command to get an access token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'https://api.butlr.io/api/v2/login\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "username": "your@email.com",\n    "password": "your_password"\n}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "access_token": "your_access_token",\n    "refresh_token": "your_refresh_token",\n    "id_token": "your_id_token",\n    "scope": "your_scopes",\n    "expires_in": 1000,\n    "token_type": "Bearer"\n}\n')),(0,r.kt)("h3",{id:"12---using-your-api-credentials"},"1.2 - Using your API Credentials"),(0,r.kt)("p",null,"Another way to get an access token is by using your API credentials.  You can use the following command to get an access token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'https://api.butlr.io/api/v2/clients/login\' \\\n--header \'content-type: application/json\' \\\n--data-raw \'{\n    "client_id": "your_client_id",\n    "client_secret": "your_client_secret"",\n    "audience": "https://butlrauth/",\n    "grant_type": "client_credentials"\n}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "access_token": "your_access_token",\n    "scope": "your_scopes",\n    "expires_in": 3666,\n    "token_type": "Bearer"\n}\n')),(0,r.kt)("h2",{id:"2---query-occupancy-for-rooms-with-presence-sensors"},"2 - Query occupancy for rooms with presence sensors"),(0,r.kt)("h3",{id:"21---query-current-occupancy-for-all-rooms"},"2.1 - Query ",(0,r.kt)("inlineCode",{parentName:"h3"},"current")," occupancy for all rooms"),(0,r.kt)("p",null,"When you want to query the current occupancy for all rooms with ",(0,r.kt)("inlineCode",{parentName:"p"},"presence")," sensors, you can use the following API call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST \'https://api.butlr.io/api/v3/reporting\' \\\n--header \'Authorization: Bearer your_access_token\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n    "group_by": {\n        "order": ["room_id", "mac_address"]\n    },\n    "window": {\n        "every": "1s",\n        "function": "max"\n    },\n    "filter": {\n        "start": "-2m",\n        "measurements": ["presence"],\n        "value": {\n            "gte": 0\n        }\n    }\n}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "data": {\n        "room_xxx1": {\n            "00-00-00-00-00-00-00-00": {\n                "sum": 71,\n                "min": 1,\n                "max": 2,\n                "count": 69,\n                "mean": 1.0289855072463767,\n                "median": 1,\n                "stddev": 0.16776575221435114,\n                "first": 1,\n                "last": 1\n            },\n            "00-00-00-00-00-00-00-01": {\n                "sum": 68,\n                "min": 1,\n                "max": 3,\n                "count": 27,\n                "mean": 2.5185185185185186,\n                "median": 3,\n                "stddev": 0.7388865682688888,\n                "first": 1,\n                "last": 2\n            }\n        },\n        "room_xxx2": {\n            "00-00-00-00-00-00-00-02": {\n                "sum": 52,\n                "min": 1,\n                "max": 1,\n                "count": 52,\n                "mean": 1,\n                "median": 1,\n                "stddev": 0,\n                "first": 1,\n                "last": 1\n            },\n            "00-00-00-00-00-00-00-03": {\n                "sum": 127,\n                "min": 1,\n                "max": 2,\n                "count": 93,\n                "mean": 1.3655913978494623,\n                "median": 2,\n                "stddev": 0.481595605947499,\n                "first": 1,\n                "last": 1\n            }\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"22-lets-break-down-the-response"},"2.2 Let's break down the response:"),(0,r.kt)("p",null,"Let's focus on 1 room"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "room_xxx1": {\n        "00-00-00-00-00-00-00-00": {\n            "sum": 71,\n            "min": 1,\n            "max": 2,\n            "count": 69,\n            "mean": 1.0289855072463767,\n            "median": 1,\n            "stddev": 0.16776575221435114,\n            "first": 1,\n            "last": 1\n        },\n        "00-00-00-00-00-00-00-01": {\n            "sum": 68,\n            "min": 1,\n            "max": 3,\n            "count": 27,\n            "mean": 2.5185185185185186,\n            "median": 3,\n            "stddev": 0.7388865682688888,\n            "first": 1,\n            "last": 2\n        }\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"room_xxx1")," is the room ID"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"00-00-00-00-00-00-00-00")," is the MAC address of the presence sensor"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sum")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"SUM(sensor.occupancy.value)")," of presence events"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"min")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"MIN(sensor.occupancy.value)")," of presence events"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"MAX(sensor.occupancy.value)")," of presence events"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"count")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"COUNT(sensor.occupancy.time)")," of presence events"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mean")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"AVG(sensor.occupancy.value)")," of presence events."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"median")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"MEDIAN(sensor.occupancy.value)")," of presence events. In ",(0,r.kt)("inlineCode",{parentName:"li"},"chronological order"),", this is the middle presence event. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stddev")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"STDDEV(sensor.occupancy.value)")," of presence events"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"first")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"FIRST(sensor.occupancy.value)")," of presence events. In ",(0,r.kt)("inlineCode",{parentName:"li"},"chronological order")," this is the first presence event."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"last")," is the ",(0,r.kt)("inlineCode",{parentName:"li"},"LAST(sensor.occupancy.value)")," of presence events. In ",(0,r.kt)("inlineCode",{parentName:"li"},"chronological order")," this is the last presence event.")),(0,r.kt)("h2",{id:"3---calculate-room-occupancy-based-on-a-collection-of-presence-sensors"},"3 - Calculate Room Occupancy based on a collection of presence sensors"),(0,r.kt)("p",null,"Since our intention is to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," occupancy, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"last")," value. This is the occupancy of the room at the moment of the query."),(0,r.kt)("p",null,"Let's assume we called the API and let ",(0,r.kt)("inlineCode",{parentName:"p"},"response")," equal the response of the API call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function roomOccupancyByPresence(response) {\n    let occupancy = {};\n\n    // return empty if no data is available\n    if (!response?.data) {\n        return occupancy;\n    }\n\n    // loop over all rooms\n    // ex. { "room_xxx1": { ... }, "room_xxx2": { ... } }\n    const data = response.data;\n    for (const room_id in data) {\n        // initialize room occupancy to 0\n        occupancy[room_id] = 0;\n\n        // 2nd level grouping is the MAC address of the presence sensor\n        const mac_addresses = data[room_id];\n\n        // skip if no presence sensors are available\n        if (!mac_addresses) {\n            continue;\n        }\n\n        // loop over all presence sensors\n        // ex. { "00-00-00-00-00-00-00-00": { ... }, "00-00-00-00-00-00-00-01": { ... } }\n        for (const mac_address in mac_addresses) {\n\n            // get the metrics of the presence sensor\n            const metrics = mac_addresses[mac_address];\n\n            // skip if no metrics are available\n            if (!metrics) {\n                continue;\n            }\n\n            // aggregate the occupancy of the room\n            // ex. { "sum": 71, "min": 1, "max": 2, "count": 69, "mean": 1.02898, "median": 1, "stddev": 0.1677, "first": 1, "last": 1 }\n            occupancy[room_id] += metrics.last;\n        }\n    }\n\n    return occupancy;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "room_xxx1": 3,\n    "room_xxx2": 2\n}\n')),(0,r.kt)("h2",{id:"closing-remarks"},"Closing Remarks"),(0,r.kt)("p",null,"This is a very basic example of how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"/v3/reporting")," API. There are many more things you can do with the API. For example, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," to help you understand what's the maximum occupants that are under a field of view for a sensor.  If you capture a week's worth of data and see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," for a sensor is ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", then you can start to question if the space is too small for more than 2 people.  "),(0,r.kt)("p",null,'The important thing here is understanding your data and what each metric means.  Before aggregating data, you have to ask yourself, "what am I trying to accomplish by aggregating a metric". For example, aggregating the ',(0,r.kt)("inlineCode",{parentName:"p"},"stddev")," doesn't make any sense at the room level. The ",(0,r.kt)("inlineCode",{parentName:"p"},"stddev")," is a measure of how spread out the data is.  If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"p"},"stddev")," of a room, you are aggregating the spread of the data.  "),(0,r.kt)("p",null,"Further examples of what it would mean to aggregate different metrics"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"max")," of each sensor, you are aggregating the peak of each sensor.  "),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"mean")," of each sensor, you are aggregating the average occupancy of each sensor."),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"median")," of each sensor, you are aggregating the middle occupancy of each sensor."),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"sum")," of each sensor, you are aggregating the total occupancy of each sensor."),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"min")," of each sensor, you are aggregating the minimum occupancy of each sensor."),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"count")," of each sensor, you are aggregating the number of presence events of each sensor."),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"first")," of each sensor, you are aggregating the first presence event of each sensor.  "),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"last")," of each sensor, you are aggregating the last presence event of each sensor.  "),(0,r.kt)("li",{parentName:"ul"},"If you aggregate the ",(0,r.kt)("inlineCode",{parentName:"li"},"stddev")," of each sensor, you are aggregating the spread of each sensor.")))}p.isMDXComponent=!0}}]);